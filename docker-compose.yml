version: '3.8'

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  kedro_data:
  airflow_dags:
  airflow_logs:
  airflow_config:
  postgres-db-volume:

services:
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: airflow_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init_data_db.sh:/docker-entrypoint-initdb.d/init_db.sh:ro
    networks:
      - mynetwork
    user: "postgres"  # Forzar que se ejecute con el usuario postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d airflow_db"]
      interval: 5s
      timeout: 5s
      retries: 10


  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  airflow-init:
    image: apache/airflow:2.10.4
    container_name: airflow_init
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    entrypoint: bash -c "
      airflow db init &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true &&
      airflow connections delete postgres_default || true &&
      airflow connections add 'postgres_default' --conn-uri 'postgresql://user:pass123@postgres_db:5432/airflow_db' &&
      airflow connections delete airflow_conn || true &&
      airflow connections add 'airflow_conn' --conn-uri 'http://admin:admin@airflow_webserver:8080' &&
      airflow connections delete postgres_data_conn || true &&
      airflow connections add 'postgres_data_conn' --conn-uri 'postgresql://user:pass123@postgres_db:5432/data_db'"
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    image: apache/airflow:2.10.4
    container_name: airflow_webserver
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://user:pass123@postgres_db:5432/airflow_db
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock  # Montaje del socket Docker
    networks:
      - mynetwork
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    user: "root"  # Cambié a root
    command: ["airflow", "webserver"]

  airflow-scheduler:
    image: apache/airflow:2.10.4
    container_name: airflow_scheduler
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Montaje del socket Docker
    networks:
      - mynetwork
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    user: "root"  # Cambié a root
    command: ["airflow", "scheduler"]

  airflow-worker:
    image: apache/airflow:2.10.4
    container_name: airflow_worker
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    volumes:
      - ./dags:/opt/airflow/dags  # Montaje sincrono de los DAGs
      - airflow_logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Montaje del socket Docker
    networks:
      - mynetwork
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    user: "root"  # Permiso root (Mala practica)
    command: ["airflow", "celery", "worker"]

  airflow-triggerer:
    image: apache/airflow:2.10.4
    container_name: airflow_triggerer
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass123@postgres_db:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Montaje del socket Docker
    networks:
      - mynetwork
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    user: "root"  # Permiso root (Mala practica)
    command: ["airflow", "triggerer"]


  kedro:
    image: franpeca/kedro_img:latest  # Uso de la imagen propia subida a Docker Hub
    container_name: kedro_container # Nombre del contenedor
    networks:
      - mynetwork
    volumes:
      - ./kedro_project:/home/kedro_docker/kedro_project:delegated  # Montaje sincrono del volumen de Kedro
      - ./docker/entrypoint.sh:/entrypoint.sh # Script de inicio para Kedro
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    ports:
      - "4141:4141"  # Para Kedro Viz
    user: "kedro_docker"  # Aquí usamos el usuario kedro_docker


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"  # Esto es necesario para que no pida agregar servidores manualmente
      PGADMIN_SERVER_HOST: "postgres_db"  # Nombre del contenedor de PostgreSQL
      PGADMIN_SERVER_PORT: "5432"         # Puerto estándar de PostgreSQL
      PGADMIN_SERVER_USER: "user"         # Usuario de PostgreSQL
      PGADMIN_SERVER_PASSWORD: "pass123"  # Contraseña de PostgreSQL
      PGADMIN_SERVER_DB: "data_db"     # Base de datos
    ports:
      - "5050:80"  # Puerto para acceder a pgAdmin
    volumes:
      - ./docker/init_pgadmin.sh:/docker-entrypoint-initdb.d/init_pgadmin.sh:ro
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy